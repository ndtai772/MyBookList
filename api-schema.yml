openapi: "3.0.2"
info:
  title: MyBookList API
  version: "0.1.0"
servers:
  - url: https://api.mybooklist.vn/v1
security:
  - Role: [admin]

components:
  securitySchemes:
    Role:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://auth.mybooklist.vn/authorize
          tokenUrl: https://auth.mybooklist.vn/token
          scopes:
            admin: admin
            user: regular user
            owner: resource owner
  parameters:
    limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 100 }
      required: false
    offset:
      name: offset
      in: query
      schema: { type: integer, minimum: 0 }
      required: false
    account_id:
      name: account_id
      in: query
      schema: { type: integer, format: snowflakeId }
      required: true

  requestBodies:
    Login:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [username, password]
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, format: password }
    AccountCreate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [username, password, email]
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, format: password }
              email: { type: string, format: email }
    AccountUpdate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            minProperties: 1
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, pattern: password }
    BookCreate:
      required: true
      content:
        multipart/form-data:
          schema:
            required: [title, author, description, cover, categories]
            properties:
              title: { type: string }
              author: { type: string }
              description: { type: string }
              cover: { format: blob }
              categories:
                type: array
                items: { type: string }
    CategoryUpdate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            minProperties: 1
            properties:
              name: { type: string }
              description: { type: string }
    BookmarkCreate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [book_id]
            properties:
              book_id: { type: integer, format: snowflakeId }
    FeedbackCreate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [content]
            properties:
              content: { type: string }
    FeedbackUpdate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            minProperties: 1
            properties:
              content: { type: string }
              feedback_status: { enum: [processing, resolved, not_resolved] }
              message: { type: string }
    RateCreate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [score]
            properties:
              score: { type: integer, maximum: 10, minimum: 1 }
    RateUpdate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [score]
            properties:
              score: { type: integer, maximum: 10, minimum: 1 }
    CommentCreate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [book_id, content]
            properties:
              book_id: { type: integer, format: snowflakeId }
              content: { type: string }
    CommentUpdate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [content]
            properties:
              content: { type: string }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            properties:
              code: { type: number }
              message: { type: string }
    InvalidRequestSchema:
      description: Invalid request scheme
      content:
        application/json:
          schema:
            properties:
              message: { type: string }

  schemas:
    username:
      type: string
      pattern: /[a-zA-Z1-9-_]{8,}/
      maxLength: 255
    list:
      properties:
        limit: { type: integer }
        offset: { type: integer }

    AccountInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        username: { type: string }
        email: { type: string, format: email }
        avatar: { type: string, format: uri }
        resource_uri: { type: string, format: uri }
        role: { enum: [admin, user] }
        modified_at: { type: integer, format: epoch }
        created_at: { type: integer, format: epoch }
    AccountBrief:
      properties:
        id: { type: integer, format: snowflakeId }
        username: { type: string }
        role: { enum: [admin, user] }
        avatar: { type: string, format: uri }
        resource_uri: { type: string, format: uri }
    BookInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        title: { type: string }
        author: { type: string }
        description: { type: string }
        resource_uri: { type: string, format: uri }
        avg_rate: { type: number, format: float }
        num_of_rates: { type: integer }
        num_of_comments: { type: integer }
        categories:
          type: array
          items: { $ref: "#/components/schemas/CategoryBrief" }
        modified_at: { type: integer, format: epoch }
        created_at: { type: integer, format: epoch }
    CategoryBrief:
      properties:
        id: { type: integer }
        name: { type: string }
        resource_uri: { type: string, format: uri }
    CategoryInfo:
      properties:
        id: { type: integer }
        name: { type: string }
        description: { type: string }
        resource_uri: { type: string, format: uri }
        created_at: { type: integer, format: epoch }
    BookmarkInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        book: { $ref: "#/components/schemas/BookInfo" }
        resource_uri: { type: string, format: uri }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        created_at: { type: integer, format: epoch }
    FeedbackInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        content: { type: string }
        resource_uri: { type: string, format: uri }
        feedback_status: { enum: [processing, resolved, not_resolved] }
        message: { type: string }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        modified_at: { type: integer, format: epoch }
        created_at: { type: integer, format: epoch }
    RateInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        score: { type: number, maximum: 5, minimum: 1 }
        resource_uri: { type: string, format: uri }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        modified_at: { type: integer, format: epoch }
        created_at: { type: integer, format: epoch }
    CommentInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        book_id: { type: integer, format: snowflakeId }
        resource_uri: { type: string, format: uri }
        content: { type: string }
        created_by: { $ref: "#/components/schemas/AccountBrief" }
        modified_at: { type: integer, format: epoch }
        created_at: { type: integer, format: epoch }

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login
      security: []
      requestBody: { $ref: "#/components/requestBodies/Login" }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  access_token: { type: string, format: JWT }
                  refresh_token: { type: string, format: JWT }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh_token: { type: string, format: JWT }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                properties:
                  access_token: { type: string, format: JWT }
                  refresh_token: { type: string, format: JWT }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /accounts:
    post:
      summary: Create account
      tags: [Account]
      security: []
      requestBody: { $ref: "#/components/requestBodies/AccountCreate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    get:
      summary: Search accounts
      tags: [Account]
      security: []
      parameters:
        - name: account_id
          in: query
          schema: { type: number, format: snowflakeId }
          required: false
        - name: username_like
          in: query
          schema: { type: string }
          required: false
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/AccountInfo" }
        404: { description: NotFound }

  /accounts/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    get:
      summary: View account
      tags: [Account]
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AccountInfo" }
        404: { description: NotFound }
    patch:
      summary: Edit account
      tags: [Account]
      security: [Role: [admin, owner]]
      requestBody: { $ref: "#/components/requestBodies/AccountUpdate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Inactive account
      tags: [Account]
      security: [Role: [admin, owner]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        400: { $ref: "#/components/responses/BadRequest" }

  /accounts/{id}/feedbacks:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    get:
      summary: List personal feedbacks
      tags: [Feedback]
      security: [Role: [admin]]
      parameters: [$ref: "#/components/parameters/account_id"]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/FeedbackInfo" }
        401: { description: Unauthorize }

  /books:
    post:
      summary: Add book
      tags: [Book]
      security: [Role: [admin]]
      requestBody: { $ref: "#/components/requestBodies/BookCreate" }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /books/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    get:
      summary: View book info
      tags: [Book]
      security: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookInfo" }
        404: { description: NotFound }
    patch:
      summary: Edit book info
      tags: [Book]
      security: [Role: [admin]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove book
      tags: [Book]
      security: [Role: [admin]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }

  /books/search:
    get:
      summary: Search books
      tags: [Book]
      security: []
      parameters:
        - name: q
          in: query
          schema: { type: string }
          description: |
            search query, results will match any book that contain the search query in it info (title, author, description, etc)
          required: false
        - name: category_id
          in: query
          schema: { type: integer }
          required: false
        - name: order_by
          in: query
          schema: { type: string }
          required: false
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookInfo" }

  /categories:
    get:
      summary: List categories
      tags: [Category]
      security: []
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                # allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/CategoryInfo" }

  /categories/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    put:
      summary: Edit category
      tags: [Category]
      security: [Role: [admin]]
      requestBody: { $ref: "#/components/requestBodies/CategoryUpdate" }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove category
      tags: [Category]
      security: [Role: [admin]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }

  /bookmarks:
    get:
      summary: List personal bookmarks
      tags: [Bookmark]
      security: [Role: [owner]]
      parameters: [$ref: "#/components/parameters/account_id"]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    post:
      summary: Bookmark a book
      tags: [Bookmark]
      security: [Role: [user]]
      requestBody: { $ref: "#/components/requestBodies/BookmarkCreate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /bookmarks/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View bookmark
      tags: [Bookmark]
      security: [Role: [owner]]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    delete:
      summary: Remove bookmark
      tags: [Bookmark]
      security: [Role: [owner]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /feedbacks:
    get:
      summary: List feedbacks
      tags: [Feedback]
      security: [Role: [admin]]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/FeedbackInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
    post:
      summary: Create feedback
      tags: [Feedback]
      security: [Role: [user]]
      requestBody: { $ref: "#/components/requestBodies/FeedbackCreate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /feedbacks/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View feedback info
      tags: [Feedback]
      security: [Role: [owner, admin]]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/FeedbackInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: Edit feedback
      tags: [Feedback]
      security: [Role: [admin, owner]]
      requestBody: { $ref: "#/components/requestBodies/FeedbackUpdate" }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove feedback
      tags: [Feedback]
      security: [Role: [admin, owner]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /rates:
    get:
      summary: List all personal rates
      tags: [Rate]
      security: [Role: [owner]]
      parameters: [$ref: "#/components/parameters/account_id"]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/RateInfo" }
        401: { description: Unauthorize }
    post:
      summary: Add rate
      tags: [Rate]
      security: [Role: [user]]
      requestBody: { $ref: "#/components/requestBodies/RateCreate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /rates/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View rate
      tags: [Rate]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RateInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: Edit rate
      tags: [Rate]
      security: [Role: [owner]]
      requestBody: { $ref: "#/components/requestBodies/RateUpdate" }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove rate
      tags: [Rate]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }

  /comments:
    get:
      summary: List all personal comments
      tags: [Comment]
      security: [Role: [owner]]
      parameters:
        - $ref: "#/components/parameters/account_id"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/list"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/CommentInfo" }
        401: { description: Unauthorize }
    post:
      summary: Add comment
      tags: [Comment]
      security: [Role: [user]]
      requestBody: { $ref: "#/components/requestBodies/RateCreate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }

  /comments/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: View comment
      tags: [Comment]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/CommentInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: Edit comment
      tags: [Comment]
      security: [Role: [owner]]
      requestBody: { $ref: "#/components/requestBodies/CommentUpdate" }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { $ref: "#/components/responses/InvalidRequestSchema" }
    delete:
      summary: Remove comment
      tags: [Comment]
      security: [Role: [admin, owner]]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
