openapi: "3.0.2"
info:
  title: MyBookList API
  version: "0.1.0"
servers:
  - url: https://api.mybooklist.vn/v1
tags:
  - name: account
components:
  parameters:
    limit:
      name: limit
      in: query
      schema: { type: integer }
    offset:
      name: offset
      in: query
      schema: { type: integer }
  requestBodies:
    Login:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [username, password]
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, format: password }
    CreateAccount:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            required: [username, password, email]
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, format: password }
              email: { type: string, format: email }
    UpdateAccount:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            minProperties: 1
            properties:
              username: { $ref: "#/components/schemas/username" }
              password: { type: string, pattern: password }
    CreateBook:
      required: true
      content:
        multipart/form-data:
          schema:
            properties:
              title: { type: string }
              author: { type: string }
              description: { type: string }
              cover: { format: blob }
    UpdateCategory:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            minProperties: 1
            properties:
              name: { type: string }
              description: { type: string }
    CreateBookmark:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              book_id: { type: integer, format: snowflakeId }
    CreateFeedback:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            properties:
              content: { type: string }
    UpdateFeedback:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema: 
            properties:
              content: {type: string}
    CreateRate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema: 
            properties:
              score: { type: number, maximum: 5, minimum: 1 }
    UpdateRate:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema: 
            properties:
              score: { type: number, maximum: 5, minimum: 1 }

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            properties:
              code:
                type: number
              message:
                type: string

  schemas:
    username:
      type: string
      pattern: /[a-zA-Z1-9-_]{8,}/
    List:
      properties:
        limit: { type: integer }
        offset: { type: integer }

    AccountInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        username: { type: string }
        email: { type: string, format: email }
        avatar: { type: string, format: uri }
        created_at: { type: integer, format: epoch }
    BookInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        title: { type: string }
        author: { type: string }
        description: { type: string }
        created_at: { type: integer, format: epoch }
    CategoryInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        name: { type: string }
        description: { type: string }
        created_at: { type: integer, format: epoch }
    BookmarkInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        book: { $ref: "#/components/schemas/BookInfo" }
        created_at: { type: integer, format: epoch }
    FeedbackInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        content: { type: string }
        created_at: { type: integer, format: epoch }
    RateInfo:
      properties:
        id: { type: integer, format: snowflakeId }
        score: { type: number, maximum: 5, minimum: 1 }
        created_at: { type: integer, format: epoch }


paths:
  /login:
    post:
      tags: [auth]
      summary: log a user in
      requestBody: { $ref: "#/components/requestBodies/Login" }
      responses:
        204: { description: Login success }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { description: Invalid request body schema }
  /accounts/{id}:
    parameters:
      - name: id
        in: path
        schema:
          type: string
          format: uuid
        required: true
    get:
      summary: view account info
      tags: [account]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/AccountInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: update account info
      tags: [account]
      requestBody: { $ref: "#/components/requestBodies/UpdateAccount" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { description: Invalid request body schema }
    delete:
      summary: delete user account
      tags: [account]
      responses:
        204: { description: OK }
        404: { description: NotFound }
        400: { $ref: "#/components/responses/BadRequest" }

  /accounts:
    post:
      summary: create new account
      tags: [account]
      requestBody: { $ref: "#/components/requestBodies/CreateAccount" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        422: { description: Invalid request body schema }
  #TODO: redesign - is /accounts/{id} enough
  /profile:
    get:
      summary: view personal profile
      tags: [profile]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/AccountInfo" }
        401: { description: Unauthorize }
    patch:
      summary: update personal info
      tags: [profile]
      requestBody: { $ref: "#/components/requestBodies/UpdateAccount" }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { description: Invalid request body schema }
    delete:
      summary: inactive personal account
      tags: [profile]
      responses:
        204: { description: Ok }
        401: { description: Unauthorize }
  /books:
    get:
      summary: list all books
      tags: [book]
      parameters:
        - name: author
          in: query
          schema: { type: string }
        - name: title
          in: query
          schema: { type: string }
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookInfo" }
    post:
      summary: add a new book
      tags: [book]
      requestBody: { $ref: "#/components/requestBodies/CreateBook" }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { description: Invalid request body schema }
  /books/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    get:
      summary: get a specific book info
      tags: [book]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookInfo" }
        404: { description: NotFound }
    patch:
      summary: update book info
      tags: [book]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
        422: { description: Invalid request body schema }
    delete:
      summary: delete a book
      tags: [book]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
  /categories:
    get:
      summary: list all book categories
      tags: [category]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/CategoryInfo" }
  /categories/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer, format: snowflakeId }
        required: true
    put:
      summary: update category info
      tags: [category]
      requestBody: { $ref: "#/components/requestBodies/UpdateCategory" }
      responses:
        204: { description: Ok }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
        422: { description: Invalid request body schema }
    delete:
      summary: delete a category
      tags: [category]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        404: { description: NotFound }
        403: { description: Forbidden }
  #TODO: redesign - should it be /bookmarks?account_id=$
  /bookmarks:
    get:
      summary: list all personal bookmarks
      tags: [bookmark]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
    post:
      summary: add a new book to personal bookmark list
      tags: [bookmark]
      requestBody: { $ref: "#/components/requestBodies/CreateBookmark" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { description: Invalid request body schema }
  /bookmarks/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: get a bookmark item info
      tags: [bookmark]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BookmarkInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    delete:
      summary: remove a specific bookmark
      tags: [bookmark]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
  #TODO: redesign - should it be /feedback?account_id=$
  /feedbacks:
    get:
      summary: list all from user feedbacks
      tags: [feedback]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/FeedbackInfo" }
        401: { description: Unauthorize }
    post:
      summary: add a new book to personal bookmark list
      tags: [feedback]
      requestBody: { $ref: "#/components/requestBodies/CreateFeedback" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { description: Invalid request body schema }
  /feedbacks/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: get a specific feedback info
      tags: [feedback]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/FeedbackInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: update a specific feedback
      tags: [feedback]
      requestBody: { $ref: "#/components/requestBodies/UpdateFeedback" }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { description: Invalid request body schema }
    delete:
      summary: remove a specific feedback
      tags: [feedback]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
  #TODO: naming (is ratings or votes better ?)
  #TODO: redesign - should it be /bookmarks?account_id=$
  /rates:
    get:
      summary: list all personal ratings
      tags: [rate]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                allOf: [$ref: "#/components/schemas/List"]
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/RateInfo" }
        401: { description: Unauthorize }
    post:
      summary: add a rating to a book
      tags: [rate]
      requestBody: { $ref: "#/components/requestBodies/CreateRate" }
      responses:
        204: { description: OK }
        400: { $ref: "#/components/responses/BadRequest" }
        401: { description: Unauthorize }
        422: { description: Invalid request body schema }
  /rates/{id}:
    parameters:
      - name: id
        in: path
        schema: { type: integer }
        required: true
    get:
      summary: get a specific feedback info
      tags: [feedback]
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema: { $ref: "#/components/schemas/RateInfo" }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
    patch:
      summary: update a specific rating
      tags: [feedback]
      requestBody: { $ref: "#/components/requestBodies/UpdateRate" }
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
        422: { description: Invalid request body schema }
    delete:
      summary: remove a specific rating
      tags: [feedback]
      responses:
        204: { description: OK }
        401: { description: Unauthorize }
        403: { description: Forbidden }
        404: { description: NotFound }
